-- Nexus UI Library
-- Professional Roblox UI Library with Material Icons
-- Version 2.0

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

local NexusUI = {}
NexusUI.__index = NexusUI

-- Material Icons (from Google Material Icons - encoded as ImageLabel IDs)
local Icons = {
    Home = "rbxassetid://3926305904",
    Settings = "rbxassetid://3926305904",
    User = "rbxassetid://3926307971",
    Combat = "rbxassetid://3926305904",
    Eye = "rbxassetid://3926305904",
    Globe = "rbxassetid://3926305904",
    Tool = "rbxassetid://3926305904",
    Check = "rbxassetid://3926305904",
    Arrow = "rbxassetid://3926305904",
}

-- Premium Theme
local Theme = {
    Background = Color3.fromRGB(18, 18, 24),
    Surface = Color3.fromRGB(24, 24, 32),
    SurfaceLight = Color3.fromRGB(32, 32, 42),
    Primary = Color3.fromRGB(99, 102, 241),
    PrimaryHover = Color3.fromRGB(129, 132, 255),
    PrimaryDark = Color3.fromRGB(79, 82, 221),
    Text = Color3.fromRGB(248, 250, 252),
    TextSecondary = Color3.fromRGB(148, 163, 184),
    TextMuted = Color3.fromRGB(100, 116, 139),
    Border = Color3.fromRGB(51, 65, 85),
    BorderLight = Color3.fromRGB(71, 85, 105),
    Success = Color3.fromRGB(34, 197, 94),
    Danger = Color3.fromRGB(239, 68, 68),
    Warning = Color3.fromRGB(251, 191, 36),
}

-- Utility Functions
local function Tween(obj, props, duration, style)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        style or Enum.EasingStyle.Quint,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(obj, tweenInfo, props)
    tween:Play()
    return tween
end

local function Create(className, properties)
    local element = Instance.new(className)
    for prop, value in pairs(properties) do
        if prop ~= "Parent" then
            element[prop] = value
        end
    end
    if properties.Parent then
        element.Parent = properties.Parent
    end
    return element
end

local function Corner(parent, radius)
    return Create("UICorner", {
        CornerRadius = UDim.new(0, radius or 8),
        Parent = parent
    })
end

local function Stroke(parent, color, thickness, transparency)
    return Create("UIStroke", {
        Color = color or Theme.Border,
        Thickness = thickness or 1,
        Transparency = transparency or 0,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = parent
    })
end

local function Padding(parent, all)
    return Create("UIPadding", {
        PaddingTop = UDim.new(0, all),
        PaddingBottom = UDim.new(0, all),
        PaddingLeft = UDim.new(0, all),
        PaddingRight = UDim.new(0, all),
        Parent = parent
    })
end

-- Create Icon
local function CreateIcon(parent, iconId, size, color)
    local icon = Create("ImageLabel", {
        Parent = parent,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, size or 20, 0, size or 20),
        Image = iconId or Icons.Home,
        ImageColor3 = color or Theme.TextSecondary,
        ScaleType = Enum.ScaleType.Fit
    })
    return icon
end

-- Main Window Constructor
function NexusUI:CreateWindow(config)
    local Window = {}
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    -- ScreenGui
    local ScreenGui = Create("ScreenGui", {
        Name = "NexusUI_" .. tick(),
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 99999
    })
    
    -- Main Frame
    local MainFrame = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -400, 0.5, -275),
        Size = UDim2.new(0, 800, 0, 550),
    })
    Corner(MainFrame, 14)
    Stroke(MainFrame, Theme.BorderLight, 1, 0.3)
    
    -- Shadow
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 50, 1, 50),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = 0,
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.3,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118)
    })
    
    -- Top Bar
    local TopBar = Create("Frame", {
        Name = "TopBar",
        Parent = MainFrame,
        BackgroundColor3 = Theme.Surface,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 55),
    })
    Corner(TopBar, 14)
    
    -- Title Container
    local TitleContainer = Create("Frame", {
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.new(0, 300, 1, 0)
    })
    
    -- Logo/Icon
    local Logo = Create("Frame", {
        Parent = TitleContainer,
        BackgroundColor3 = Theme.Primary,
        Position = UDim2.new(0, 0, 0.5, -16),
        Size = UDim2.new(0, 32, 0, 32),
    })
    Corner(Logo, 8)
    
    local LogoText = Create("TextLabel", {
        Parent = Logo,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "N",
        TextColor3 = Theme.Text,
        TextSize = 18,
    })
    
    -- Title
    local Title = Create("TextLabel", {
        Parent = TitleContainer,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 42, 0, 0),
        Size = UDim2.new(1, -42, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = config.Title or "Nexus UI",
        TextColor3 = Theme.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Subtitle
    local Subtitle = Create("TextLabel", {
        Parent = TitleContainer,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 42, 0, 24),
        Size = UDim2.new(1, -42, 0, 16),
        Font = Enum.Font.Gotham,
        Text = config.Subtitle or "Premium Edition",
        TextColor3 = Theme.TextSecondary,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Control Buttons Container
    local ControlsContainer = Create("Frame", {
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -100, 0, 0),
        Size = UDim2.new(0, 90, 1, 0)
    })
    
    -- Minimize Button
    local MinimizeBtn = Create("TextButton", {
        Parent = ControlsContainer,
        BackgroundColor3 = Theme.SurfaceLight,
        Position = UDim2.new(0, 0, 0.5, -16),
        Size = UDim2.new(0, 32, 0, 32),
        Text = "",
        AutoButtonColor = false
    })
    Corner(MinimizeBtn, 8)
    
    local MinimizeIcon = Create("TextLabel", {
        Parent = MinimizeBtn,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "−",
        TextColor3 = Theme.TextSecondary,
        TextSize = 16
    })
    
    local Minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        Minimized = not Minimized
        if Minimized then
            Tween(MainFrame, {Size = UDim2.new(0, 800, 0, 55)}, 0.3)
            MinimizeIcon.Text = "+"
        else
            Tween(MainFrame, {Size = UDim2.new(0, 800, 0, 550)}, 0.3)
            MinimizeIcon.Text = "−"
        end
    end)
    
    MinimizeBtn.MouseEnter:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.Primary}, 0.2)
        Tween(MinimizeIcon, {TextColor3 = Theme.Text}, 0.2)
    end)
    
    MinimizeBtn.MouseLeave:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
        Tween(MinimizeIcon, {TextColor3 = Theme.TextSecondary}, 0.2)
    end)
    
    -- Close Button
    local CloseBtn = Create("TextButton", {
        Parent = ControlsContainer,
        BackgroundColor3 = Theme.SurfaceLight,
        Position = UDim2.new(0, 42, 0.5, -16),
        Size = UDim2.new(0, 32, 0, 32),
        Text = "",
        AutoButtonColor = false
    })
    Corner(CloseBtn, 8)
    
    local CloseIcon = Create("TextLabel", {
        Parent = CloseBtn,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Theme.TextSecondary,
        TextSize = 20
    })
    
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.4, Enum.EasingStyle.Back)
        wait(0.4)
        ScreenGui:Destroy()
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Theme.Danger}, 0.2)
        Tween(CloseIcon, {TextColor3 = Theme.Text}, 0.2)
    end)
    
    CloseBtn.MouseLeave:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
        Tween(CloseIcon, {TextColor3 = Theme.TextSecondary}, 0.2)
    end)
    
    -- Accent Line
    Create("Frame", {
        Parent = TopBar,
        BackgroundColor3 = Theme.Primary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -1),
        Size = UDim2.new(1, 0, 0, 1),
        BackgroundTransparency = 0.5
    })
    
    -- Sidebar
    local Sidebar = Create("Frame", {
        Parent = MainFrame,
        BackgroundColor3 = Theme.Surface,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 55),
        Size = UDim2.new(0, 190, 1, -55),
    })
    
    local SidebarList = Create("UIListLayout", {
        Parent = Sidebar,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 4)
    })
    
    Padding(Sidebar, 10)
    
    -- Content Area
    local ContentArea = Create("Frame", {
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 190, 0, 55),
        Size = UDim2.new(1, -190, 1, -55),
    })
    
    -- Dragging
    local Dragging = false
    local DragInput, DragStart, StartPos
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    
    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            DragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            local Delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(
                StartPos.X.Scale,
                StartPos.X.Offset + Delta.X,
                StartPos.Y.Scale,
                StartPos.Y.Offset + Delta.Y
            )
        end
    end)
    
    -- Add Tab
    function Window:AddTab(name, iconId)
        local Tab = {}
        
        -- Tab Button
        local TabBtn = Create("TextButton", {
            Parent = Sidebar,
            BackgroundColor3 = Theme.SurfaceLight,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 40),
            Text = "",
            AutoButtonColor = false
        })
        Corner(TabBtn, 8)
        
        -- Tab Icon
        if iconId then
            CreateIcon(TabBtn, iconId, 18, Theme.TextSecondary)
        end
        
        -- Tab Label
        local TabLabel = Create("TextLabel", {
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 35, 0, 0),
            Size = UDim2.new(1, -35, 1, 0),
            Font = Enum.Font.GothamMedium,
            Text = name,
            TextColor3 = Theme.TextSecondary,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        -- Tab Indicator
        local TabIndicator = Create("Frame", {
            Parent = TabBtn,
            BackgroundColor3 = Theme.Primary,
            BorderSizePixel = 0,
            Position = UDim2.new(0, -10, 0.5, -12),
            Size = UDim2.new(0, 0, 0, 24),
            Visible = false
        })
        Corner(TabIndicator, 4)
        
        -- Tab Content
        local TabContent = Create("ScrollingFrame", {
            Parent = ContentArea,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Theme.Primary,
            ScrollBarImageTransparency = 0.5,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })
        
        Padding(TabContent, 15)
        
        -- Tab Click
        TabBtn.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                Tween(tab.Button, {BackgroundTransparency = 1}, 0.2)
                Tween(tab.Label, {TextColor3 = Theme.TextSecondary}, 0.2)
                tab.Indicator.Visible = false
                tab.Content.Visible = false
            end
            
            Tween(TabBtn, {BackgroundTransparency = 0}, 0.2)
            Tween(TabLabel, {TextColor3 = Theme.Text}, 0.2)
            TabIndicator.Visible = true
            Tween(TabIndicator, {Size = UDim2.new(0, 3, 0, 24)}, 0.3, Enum.EasingStyle.Back)
            TabContent.Visible = true
        end)
        
        TabBtn.MouseEnter:Connect(function()
            if TabBtn.BackgroundTransparency == 1 then
                Tween(TabBtn, {BackgroundTransparency = 0.5}, 0.2)
            end
        end)
        
        TabBtn.MouseLeave:Connect(function()
            if TabBtn.BackgroundTransparency ~= 0 then
                Tween(TabBtn, {BackgroundTransparency = 1}, 0.2)
            end
        end)
        
        Tab.Button = TabBtn
        Tab.Label = TabLabel
        Tab.Indicator = TabIndicator
        Tab.Content = TabContent
        
        -- First tab selected
        if #Window.Tabs == 0 then
            TabBtn.BackgroundTransparency = 0
            TabLabel.TextColor3 = Theme.Text
            TabIndicator.Visible = true
            TabIndicator.Size = UDim2.new(0, 3, 0, 24)
            TabContent.Visible = true
        end
        
        table.insert(Window.Tabs, Tab)
        
        -- Elements
        function Tab:AddLabel(text)
            local Label = Create("TextLabel", {
                Parent = TabContent,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 20),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Theme.TextSecondary,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y
            })
            return Label
        end
        
        function Tab:AddButton(config)
            local Btn = Create("TextButton", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Surface,
                Size = UDim2.new(1, -10, 0, 42),
                Text = "",
                AutoButtonColor = false
            })
            Corner(Btn, 10)
            Stroke(Btn, Theme.Border, 1, 0.5)
            
            local BtnLabel = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -15, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name or "Button",
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            Btn.MouseButton1Click:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.Primary}, 0.1)
                wait(0.1)
                Tween(Btn, {BackgroundColor3 = Theme.Surface}, 0.2)
                if config.Callback then
                    pcall(config.Callback)
                end
            end)
            
            Btn.MouseEnter:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
            end)
            
            Btn.MouseLeave:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.Surface}, 0.2)
            end)
        end
        
        function Tab:AddToggle(config)
            local toggled = config.Default or false
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Surface,
                Size = UDim2.new(1, -10, 0, 42)
            })
            Corner(Frame, 10)
            Stroke(Frame, Theme.Border, 1, 0.5)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name or "Toggle",
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ToggleOuter = Create("Frame", {
                Parent = Frame,
                BackgroundColor3 = toggled and Theme.Primary or Theme.SurfaceLight,
                Position = UDim2.new(1, -55, 0.5, -11),
                Size = UDim2.new(0, 46, 0, 22)
            })
            Corner(ToggleOuter, 11)
            
            local ToggleInner = Create("Frame", {
                Parent = ToggleOuter,
                BackgroundColor3 = Theme.Text,
                Position = toggled and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9),
                Size = UDim2.new(0, 18, 0, 18)
            })
            Corner(ToggleInner, 9)
            
            local Btn = Create("TextButton", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = ""
            })
            
            Btn.MouseButton1Click:Connect(function()
                toggled = not toggled
                Tween(ToggleOuter, {BackgroundColor3 = toggled and Theme.Primary or Theme.SurfaceLight}, 0.2)
                Tween(ToggleInner, {Position = toggled and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)}, 0.25, Enum.EasingStyle.Back)
                if config.Callback then
                    pcall(config.Callback, toggled)
                end
            end)
        end
        
        function Tab:AddSlider(config)
            local min = config.Min or 0
            local max = config.Max or 100
            local default = config.Default or min
            local callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Surface,
                Size = UDim2.new(1, -10, 0, 58)
            })
            Corner(Frame, 10)
            Stroke(Frame, Theme.Border, 1, 0.5)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 8),
                Size = UDim2.new(1, -70, 0, 18),
                Font = Enum.Font.GothamMedium,
                Text = config.Name or "Slider",
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local Value = Create("TextLabel", {
                Parent = Frame,
                BackgroundColor3 = Theme.SurfaceLight,
                Position = UDim2.new(1, -55, 0, 6),
                Size = UDim2.new(0, 45, 0, 22),
                Font = Enum.Font.GothamBold,
                Text = tostring(default),
                TextColor3 = Theme.Primary,
                TextSize = 12
            })
            Corner(Value, 6)
            
            local Bar = Create("Frame", {
                Parent = Frame,
                BackgroundColor3 = Theme.SurfaceLight,
                Position = UDim2.new(0, 15, 1, -20),
                Size = UDim2.new(1, -30, 0, 6)
            })
            Corner(Bar, 3)
            
            local Fill = Create("Frame", {
                Parent = Bar,
                BackgroundColor3 = Theme.Primary,
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            })
            Corner(Fill, 3)
            
            local Knob = Create("Frame", {
                Parent = Bar,
                BackgroundColor3 = Theme.Text,
                Position = UDim2.new((default - min) / (max - min), -7, 0.5, -7),
                Size = UDim2.new(0, 14, 0, 14)
            })
            Corner(Knob, 7)
            Stroke(Knob, Theme.Primary, 2)
            
            local Input = Create("TextButton", {
                Parent = Bar,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = ""
            })
            
            local dragging = false
            
            local function Update(input)
                local pos = (input.Position.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X
                pos = math.clamp(pos, 0, 1)
                local value = math.floor(min + (max - min) * pos)
                
                Tween(Fill, {Size = UDim2.new(pos, 0, 1, 0)}, 0.1, Enum.EasingStyle.Linear)
                Tween(Knob, {Position = UDim2.new(pos, -7, 0.5, -7)}, 0.1, Enum.EasingStyle.Linear)
                Value.Text = tostring(value)
                pcall(callback, value)
            end
            
            Input.MouseButton1Down:Connect(function()
                dragging = true
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    Update(input)
                end
            end)
        end
        
        function Tab:AddTextBox(config)
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Surface,
                Size = UDim2.new(1, -10, 0, 42)
            })
            Corner(Frame, 10)
            Stroke(Frame, Theme.Border, 1, 0.5)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(0.35, 0, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name or "TextBox",
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local Box = Create("TextBox", {
                Parent = Frame,
                BackgroundColor3 = Theme.SurfaceLight,
                Position = UDim2.new(0.4, 0, 0.5, -13),
                Size = UDim2.new(0.55, -15, 0, 26),
                Font = Enum.Font.Gotham,
                PlaceholderText = config.Placeholder or "",
                PlaceholderColor3 = Theme.TextMuted,
                Text = config.Default or "",
                TextColor3 = Theme.Text,
                TextSize = 12,
                ClearTextOnFocus = false
            })
            Corner(Box, 6)
            Padding(Box, 8)
            
            Box.FocusLost:Connect(function(enter)
                if enter and config.Callback then
                    pcall(config.Callback, Box.Text)
                end
            end)
        end
        
        function Tab:AddDropdown(config)
            local options = config.Options or {}
            local selected = config.Default or options[1] or ""
            local callback = config.Callback or function() end
            local open = false
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Surface,
                Size = UDim2.new(1, -10, 0, 42),
                ClipsDescendants = false,
                ZIndex = 10
            })
            Corner(Frame, 10)
            Stroke(Frame, Theme.Border, 1, 0.5)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(0.35, 0, 1, 0),
                Font = Enum.Font.GothamMedium,
                Text = config.Name or "Dropdown",
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 11
            })
            
            local Btn = Create("TextButton", {
                Parent = Frame,
                BackgroundColor3 = Theme.SurfaceLight,
                Position = UDim2.new(0.4, 0, 0.5, -13),
                Size = UDim2.new(0.55, -15, 0, 26),
                Text = "",
                ZIndex = 11,
                AutoButtonColor = false
            })
            Corner(Btn, 6)
            
            local BtnText = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.Gotham,
                Text = selected,
                TextColor3 = Theme.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextTruncate = Enum.TextTruncate.AtEnd,
                ZIndex = 12
            })
            
            local Arrow = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 1, 0),
                Font = Enum.Font.Gotham,
                Text = "▼",
                TextColor3 = Theme.TextSecondary,
                TextSize = 10,
                ZIndex = 12
            })
            
            local List = Create("ScrollingFrame", {
                Parent = Frame,
                BackgroundColor3 = Theme.SurfaceLight,
                Position = UDim2.new(0.4, 0, 0, 48),
                Size = UDim2.new(0.55, -15, 0, 0),
                Visible = false,
                ZIndex = 15,
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = Theme.Primary,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                AutomaticCanvasSize = Enum.AutomaticSize.Y
            })
            Corner(List, 6)
            Stroke(List, Theme.Primary, 1)
            
            Create("UIListLayout", {
                Parent = List,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2)
            })
            
            Padding(List, 4)
            
            for _, option in ipairs(options) do
                local OptBtn = Create("TextButton", {
                    Parent = List,
                    BackgroundColor3 = Theme.Surface,
                    BackgroundTransparency = 0.5,
                    Size = UDim2.new(1, -8, 0, 28),
                    Font = Enum.Font.Gotham,
                    Text = option,
                    TextColor3 = Theme.Text,
                    TextSize = 12,
                    ZIndex = 16,
                    AutoButtonColor = false
                })
                Corner(OptBtn, 5)
                
                OptBtn.MouseButton1Click:Connect(function()
                    selected = option
                    BtnText.Text = option
                    open = false
                    List.Visible = false
                    Tween(List, {Size = UDim2.new(0.55, -15, 0, 0)}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, -10, 0, 42)}, 0.2)
                    pcall(callback, option)
                end)
                
                OptBtn.MouseEnter:Connect(function()
                    Tween(OptBtn, {BackgroundTransparency = 0}, 0.2)
                end)
                
                OptBtn.MouseLeave:Connect(function()
                    Tween(OptBtn, {BackgroundTransparency = 0.5}, 0.2)
                end)
            end
            
            Btn.MouseButton1Click:Connect(function()
                open = not open
                List.Visible = open
                if open then
                    local h = math.min(#options * 30, 140)
                    Tween(List, {Size = UDim2.new(0.55, -15, 0, h)}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, -10, 0, 42 + h + 10)}, 0.2)
                else
                    Tween(List, {Size = UDim2.new(0.55, -15, 0, 0)}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, -10, 0, 42)}, 0.2)
                end
            end)
        end
        
        function Tab:AddSeparator()
            Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Border,
                BackgroundTransparency = 0.5,
                Size = UDim2.new(1, -10, 0, 1)
            })
        end
        
        return Tab
    end
    
    -- Intro
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    Tween(MainFrame, {Size = UDim2.new(0, 800, 0, 550)}, 0.5, Enum.EasingStyle.Back)
    
    return Window
end

return NexusUI
